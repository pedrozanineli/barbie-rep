* GENERATED BY CHARMM-GUI (http://www.charmm-gui.org) v3.7 on Jun, 02. 2024. JOBID=1734830673
* Molecular packing using all-atom greedy search
*

DIMENS CHSIZE 5000000 MAXRES 5000000 MAXGRP 5000000

! Read topology and parameter files
stream toppar.str


set has_membrane = NO
set has_periodic = NO
set pbcztot = 0

! Big spheres used for packing; later replaced by the real molecules
read rtf  card name step2_make_toppar.rtf append flex
read para card name step2_make_toppar.prm append flex

! Read user settings
set counts_file = step2_count.str

calc num_structs = 0
stream sorted_info.str 0 solvated
incr num_structs by @numtype
stream sorted_info.str 0 memb
incr num_structs by @numtype

set all_types_1 = memb
set all_types_2 = solvated
calc nsorttypes = 0
calc nalltypes = 2


! get upper limit of particles to place: 1 per solvated, 1-3 per membrane
stream @{counts_file} 0
calc maxgeo = @nsolv + 3*@nmemb
set maxgeo = maxgeo @maxgeo

! make a CHARMM array of sort types
calc alli = 1
calc sorti = 1
label MAKE_SORT_TYPES
    set sort_type = @{all_types_@@alli}
    stream sorted_info.str 0 @{sort_type}
    if numtype .gt. 0 then
        set sort_type_@sorti = @{sort_type}
        incr sorti
        incr nsorttypes
    endif

    incr alli
    if alli .le. @nalltypes goto MAKE_SORT_TYPES


set xtltype = CUBIC
if has_membrane .eq. YES set xtltype TETRAGONAL
if has_periodic .eq. YES set xtltype ORTHORHOMBIC

!
! === Initial setting ===
! - reading each structure's PSF & CRD
! - calculating structure's radius to select an appropriate sphere for
!   packing
!

set alpha = 90.0
set beta  = 90.0
set gamma = 90.0

! Calculated system size from previous step
calc xdim = 89.153390323488
calc ydim = 89.153390323488
calc zdim = 89.153390323488
calc xhalf = @xdim / 2
calc yhalf = @ydim / 2
calc zhalf = @zdim / 2

calc A = @xdim
calc B = @ydim
calc C = @zdim

stream polinfo/define_pbc.str

! Length of shortest dimension; only relevant for membrane/periodic systems
set smalldim = @xdim
if ydim lt @smalldim set smalldim = @ydim
if zdim lt @smalldim set smalldim = @zdim

define periodic sele none end

set npatoms = 0 ! number of periodic component atoms

! Random number generation
RAND UNIF ISEED 1734830673 SCALE 1.0


set MPOL_exists = 0  ! membrane spheres
set SPOL_exists = 0  ! solvated spheres
set resid = 1   ! membrane and solvated structures are in separate segments
set typeind = 1 ! current sort type's number
set sort_type = @{sort_type_1}
set sorti = 1   ! index through structures of the same sort type
set retlabel = do_structure

define fixed sele none end

stream sorted_info.str @sorti @{sort_type}

label do_structure

! Radius was calculated in step1_psfcrdreader.inp
stream psfcrdreader/struct_@{structi}.str

! nlig is specified by user (or derived from user-specified values)
stream @{counts_file} @structi

! skip spheres for solvent molecules
if nlig .le. 0 then goto end_structure

read sequence POL@structi @nlig
generate TEMP warn angles dihedrals

coor stat select all end
calc npart = ?nsel        ! total number of particles
coor stat select segid TEMP end
calc nmissingtot = ?nsel  ! number of particles without coordinates
coor stat select segid TEMP .and. resid 1 end
calc npartresi = ?nsel    ! number of particles in a single residue
coor stat select segid TEMP end
calc nmissing = @nmissingtot / @npartresi  ! number of residues to place

if sort_type .eq. MEMB set poltype = MPOL
if sort_type .ne. MEMB set poltype = SPOL
if @{@@{poltype}_exists} .eq. 0 then
    rename segid @poltype select segid TEMP end
    set @poltype_exists = 1
else
    join @poltype TEMP renumber
endif


!
! Initial placement of big spheres at random positions
!

set dorestraint = NO
if has_membrane .eq. YES set dorestraint = YES
if has_periodic .eq. YES set dorestraint = YES

! First, guess available regions for initial positions of the big-spheres (150%)
if has_periodic .eq. yes then
    calc Ainit = @A
    calc Binit = @B
else
    calc Ainit = @A * 1.5
    calc Binit = @B * 1.5
endif
calc Cinit = @C * 1.5

set cind = 1
set oldind = na  ! used for writing one of each POL

calc ntrymax = 100 * @npbcz
set ntry 0
label do_init
    stream polinfo/struct_@structi.str
    stream polinfo/position_@structi.str @Ainit @Binit @Cinit @cind
    if sort_type .eq. memb then
        set pname = POL@structi

        ! setup namespace for place_pol.str
        set pname = POL@structi
        set segid = @poltype

        stream place_pol.str

        ! move POL to chosen location
        coor trans xdir @xpos ydir @ypos zdir @zpos -
             select segid @poltype .and. resid @resid end
    else
        ! move POL to chosen random location
        coor set xdir @xpos ydir @ypos zdir @zpos -
             select segid @poltype .and. resid @resid end
    endif

    ! reject any position that collides with a periodic component
    set checkmemb = YES
    if poltype .eq. MPOL set checkmemb = NO
    if dorestraint .eq. NO set checkmemb = NO
    if checkmemb .eq. YES then
        stream polinfo/select_pbc.str exclude
        define inpbc sele inpbc .and. segid @poltype .and. resid @resid end
        set npair = ?nsel
        if npatoms .gt. 0 then
            if npair .eq. 0 -
                coor dist cut @radius sele periodic end -
                          sele segid @poltype .and. resid @resid end
            if npair .eq. 0 set npair = ?npair
        endif
        if npair gt 0 then
            incr ntry
            if ntry ge @ntrymax stop ! ABNORMAL TERMINATION: not enough space to place sphere
            goto do_init
        endif
    endif

    ! write a POL to the uploaded_files directory, for debugging/viewing
    if structi .ne. @oldind then
        write coor pdb name uploaded_files/struct_@{structi}.pdb -
              select segid @poltype .and. resid @resid end
        set oldind = @structi
    endif

    ! track fixed components
    set fix = no
    set zplanar = no
    if xrand .eq. no if yrand .eq. no if zrand .eq. no set fix = yes
    if fix .eq. yes -
        define fixed sele fixed .or. segid @poltype .and. resid @resid end
    if poltype .eq. SPOL if xrand .eq. yes if yrand .eq. yes if zrand .eq. no -
        set zplanar = yes

    ! solvated components use a different type of restraint
    set pbcrestraint = @dorestraint
    if zplanar .eq. yes set pbcrestraint = no

    ! apply planar restraints if necessary
    if pbcrestraint .eq. YES then
        ! fix membrane POL orientation wrt. Z axis
        if poltype .eq. MPOL then
            MMFP
            if above .gt. 0 then
                GEO @maxgeo plane zref @{above_z} zdir 1.0 -
                    force 100 select type POL@{structi}A .and. resid @resid end
                set maxgeo
            endif
            if inside .gt. 0 then
                GEO @maxgeo plane zref @{inside_z} zdir 1.0 -
                    force 100 select type POL@{structi}I .and. resid @resid end
                set maxgeo
            endif
            if below .gt. 0 then
                GEO @maxgeo plane zref @{below_z} zdir 1.0 -
                    force 100 select type POL@{structi}B .and. resid @resid end
                set maxgeo
            endif
            END
        else
            ! keep solvated molecules away from periodic components or membrane
            set pbcind = 1
            label do_cons_solv
                set zref = @pbczpos@@pbcind
                set pbczlenex = @pbczlenex@@pbcind
                calc droff = @pbczlenex / 2 + @radius

                MMFP
                GEO @maxgeo plane zref @zref zdir 1.0 -
                    harmonic outside force 100 droff @droff -
                    select type POL@structi .and. resid @resid end
                END
                set maxgeo

                incr pbcind
                if pbcind .le. @npbcz goto do_cons_solv
        endif
    endif

    if zplanar .eq. YES then
        MMFP
        GEO @maxgeo plane zref @zpos zdir 1.0 -
            force 100 select type POL@structi .and. resid @resid end
        END
        set maxgeo
    endif

    increase cind
    increase resid
    decrease nmissing
    set ntry 0
    if nmissing gt 0 goto do_init

label end_structure

incr sorti
if numtype .ge. @sorti then
    stream sorted_info.str @sorti @{sort_type}
    goto @retlabel
else
    set sorti = 1
    incr typeind
    ! Go to next structure type, if one exists
    if typeind .le. @nsorttypes then
        set sort_type = @{sort_type_@@typeind}
        stream sorted_info.str @sorti @{sort_type}
        set resid = 1
        goto @retlabel
    endif
endif

if has_periodic .eq. YES -
    define fixed sele fixed .or. periodic end

!cons fix sele fixed end purg
cons fix sele fixed end

! Second, setup the periodic boundary conditions and do minimization and
! dynamics for packing of big spheres. 6 cycles to reduce the Ainit, Binit,
! and Cinit back to original A, B, and C

! use full Z dimension for simulation
calc C = @zdim
calc Cinit = @zdim * 1.5

! first get the largest radius
set retlabel = get_radius
set sorti = 1
set sort_type = @{sort_type_1}
set maxradius = -1

stream sorted_info.str @sorti @{sort_type}

label get_radius
    stream psfcrdreader/struct_@{structi}.str
    if radius .gt. @maxradius set maxradius = @radius
    incr sorti
    if sorti .le. @nsorttypes then
        set sort_type = @{sort_type_@@sorti}
        stream sorted_info.str 1 @{sort_type}
        goto @retlabel
    endif

! choose cutoffs wrt radius of largest structure
calc ctonnb = @maxradius * 2 + 10
calc ctofnb = @ctonnb
calc cutnb  = @ctofnb + 10
calc cutim  = @cutnb

if cutnb .ge. @smalldim then
    calc cutnb = @smalldim * 0.9
    calc cutim = @cutnb
    calc ctofnb = @cutnb * 0.9
    calc ctonnb = @ctofnb * 0.9
endif

! LD simulation steps depend on the number of lipid spheres
calc nstep = int ( ( @{num_structs} ) * 4 / 50000 + 1 ) * 50000

set icycle = 5

! If there's only one molecule, skip packing
calc nsphere = @nsolv + @nmemb
if nsphere .le. 1 goto skip_packing

label do_packing

if has_periodic eq YES then
    calc Ainit = @A
    calc Binit = @B
    calc Cinit = @C * 1.@icycle
else
    calc Ainit = @A * 1.@icycle
    calc Binit = @B * 1.@icycle
    calc Cinit = @C * 1.@icycle
endif

crystal free
crystal define @xtltype @Ainit @Binit @Cinit @alpha @beta @gamma

open read unit 10 card name crystal_image.str
crystal read unit 10 card
close unit 10

if has_periodic .eq. yes then
    read coor card name temp.periodic.crd sele periodic end
    image byatom sele periodic end
endif
image byresid sele .not. periodic end

! setup nonbond option (eps=80)
nbonds atom switch cdie vdw vfswitch  -
       ctonnb @ctonnb ctofnb @ctofnb cutnb @cutnb cutim @cutim -
       inbfrq -1 imgfrq -1 wmin 1.0 cdie eps 80.0

ENERGY

mini sd   nstep 200 nprint 10
mini abnr nstep 200 nprint 10

set temp = 500
scalar fbeta set  10.0 select all end

set iuncrd = -1
set nsavcrd = 0

if @?debug .eq. 1 then
    ! write DCD frames for debugging/visualization
    set iuncrd = 50    ! unit to write DCD frames; -1 to ignore
    set nsavcrd = 500  ! frequency of saving frames; 0 to ignore
    open unit @iuncrd name dyna@icycle.dcd write unformatted
endif

if iuncrd ne -1 open unit @iuncrd name dyna@icycle.dcd write unformatted

DYNAMICS  start       nstep @nstep  timestp  0.002 iprfrq   5000  nprint 5000  echeck -1 -
          iasvel    1 firstt @temp  finalt   @temp tstruc  @temp  -
          langevin    tbath  @temp  rbuf       0.0 -
          inbfrq   -1 imgfrq    -1  ihbfrq       0 ilbfrq      0  -
          iunread  -1  -
          iunwrite -1  -
          iuncrd @iuncrd nsavcrd @nsavcrd -
          iunvelo     -1 nsavvelo       0 -
          kunit       -1

if iuncrd ne -1 close unit @iuncrd

decrease icycle by 1
if icycle .ge. 0 goto do_packing

nbonds atom switch cdie vdw vfswitch  -
       ctonnb 10.0 ctofnb 12.0 cutnb 14.0 cutim 16.0 -
       inbfrq -1 imgfrq -1 wmin 1.0 cdie eps 80.0

crystal free

cons fix select none end

label skip_packing

!
! Sort BIG spheres (resids) according to their distance to the origin.
!


! make an unambiguous reference to system center
read sequence DUM 1
generate POL0 warn angles dihedrals
coor set xdir 1.0 dist 0.0 select segid POL0 end

set typeind = 1
set sort_type = @{sort_type_1}
set sorti = 1

stream sorted_info.str @sorti @{sort_type}
stream @{counts_file} @structi

set retlabel = do_sort
set cind = 1      ! current structure copy index
set resid = 1     ! current resid
set iend = @nlig  ! resid of last POL of this structure
read sequence POL@structi 1
generate TEMP warn angles dihedrals

label do_sort
    if sort_type .eq. MEMB set poltype = MPOL
    if sort_type .eq. SOLVATED set poltype = SPOL

    if resid .eq. 1 if typeind .eq. 1 if has_periodic eq NO goto end_sort
    if resid .gt. @iend goto end_sort

    ! find the one closest to center
    define target1 select segid @poltype .and. resid @resid end
    define target2 select segid @poltype .and. resid @resid:@iend end
    coor mindist select target2 end select segid POL0 end
    define target2 select .byres. bynum ?minda1 end

    ! swap the two selections' coordinates using placeholder
    coor dupl select target1 end select segid TEMP end  ! 1 to TEMP
    coor dupl select target2 end select target1 end     ! 2 to 1
    coor dupl select segid TEMP end select target2 end  ! 1 to 2

    label end_sort
    incr resid
    incr cind
    if nlig .ge. @cind goto @retlabel
    incr sorti
    if numtype .ge. @sorti then
        stream sorted_info.str @sorti @{sort_type}
        stream @{counts_file} @structi
        incr iend by @nlig
        set cind = 1

        delete atoms select segid TEMP end

        read sequence POL@structi 1
        generate TEMP warn angles dihedrals

        goto @retlabel
    else
        set sorti = 1
        incr typeind
        ! Go to next structure type, if one exists
        if typeind .le. @nsorttypes then
            set sort_type = @{sort_type_@@typeind}
            stream sorted_info.str @sorti @{sort_type}
            stream @{counts_file} @structi
            set resid = 1
            set cind = 1
            set iend = @nlig

            delete atoms select segid TEMP end

            read sequence POL@structi 1
            generate TEMP warn angles dihedrals

            goto @retlabel
         endif
     endif


write coor pdb name step2_molpacking_pol.pdb
delete atoms select segid POL0 .or. segid TEMP end

!
! Replace the sphere with the corresponding molecule [STAGE 1]
!

open write card unit 51 name step2_nbad.0.dat
write title unit 51
*# typeind sorti cind nxyzmove nbadthis nbadmin
*# typeind sorti cind nxyzmove rotxang rotyang rotzang nbadthis nbadmin
*
open write card unit 52 name step2_nbad.1.dat
write title unit 52
*# typeind sorti nxyzmovemin rotxangmin rotyangmin rotzangmin nbadmin npair
*# CYCLE iopt nbadtot nnomove pnomove
* cycle 0
*

set nbadtot = 0

calc nsphere = @nsolv + @nmemb
set typeind = 1
set sort_type = @{sort_type_1}
set sorti = 1

stream sorted_info.str @sorti @{sort_type}
stream @{counts_file} @structi

! show seed for debugging; this also changes the seed
RAND UNIF SCALE 1.0

set retlabel = do_replace
set cind = 1      ! current structure copy index
set resid = 1     ! current resid
set iend = @nlig  ! resid of last POL of this structure

label do_replace
    if nlig .eq. 0 goto skip_replace

    if sort_type .eq. MEMB set poltype = MPOL
    if sort_type .ne. MEMB set poltype = SPOL

    define replace select segid @poltype .and. resid @resid end
    coor stat select replace end
    calc xi = ?xave
    calc yi = ?yave
    calc zi = ?zave

    set psffile = psfcrdreader/struct_@structi.psf
    set crdfile = psfcrdreader/struct_@structi.crd

    ! to prevent potential naming conflicts: save, then clear PSF
    write psf  card name temp.state.psf
    write coor card name temp.state.crd
    delete atoms select all end

    ! read the new structure
    read psf  card name @psffile
    read coor card name @crdfile

    define target select all end

    ! read segment renaming map
    stream psfcrdreader/rename_@{structi}.str @cind

    ! save new PSF's name
    write psf  card name temp.state2.psf
    write coor card name temp.state2.crd
    delete atoms select all end

    ! ensure new molecule appears at BOTTOM of PSF
    read psf  card name temp.state.psf
    read coor card name temp.state.crd

    define TOTO select all end

    read psf  card name temp.state2.psf append
    read coor card name temp.state2.crd append

    ! PSF I/O invalidates selections, so target must be redefined
    define target select .not. TOTO end


    ! ensure structure's coordinates are relative to its center-of-mass
    coor stat select target end
    if poltype .eq. MPOL then
        coor trans xdir -?xave ydir -?yave zdir 0 select target end
        set zi = 0  ! PDB Z takes precedence over packing Z
    else
        coor trans xdir -?xave ydir -?yave zdir -?zave select target end
    endif
    coor stat select target end

    ! check bad contacts
    calc nbadmax  =  10     ! maximum allowed # bad contacts
    calc dcut     =   2.5   ! distance cut for bad contact counts
    calc delang   = 120.0   ! rotation increment
    calc initang  =   0.0   ! inital rotation angle
    calc finalang = 359.0   ! final rotation angle
                            ! xy translation increment
    if poltype .eq. MPOL calc delxyz = @A / @nsphere
    if poltype .ne. MPOL calc delxyz = @C / @nsphere
    if delxyz .lt. 2.5 calc delxyz = 2.5
    if delxyz .gt. 10.0 calc delxyz = 10.0

    calc rotang = 360 * ?random
    coor stat sele target end

    ! initial rotation
    if poltype .eq. MPOL then
        ! initially match polymer's rotation
        read sequence POL@structi 1
        generate TEMP warn angles dihedrals

        ! setup namespace for place_pol.str
        set oldresid = @resid
        set resid = 1
        set segid = TEMP
        set pname = POL@structi

        ! initialize TEMP polymer at center
        stream polinfo/struct_@structi.str
        stream place_pol.str
        set resid = @oldresid

        ! get the rotation between start/end polymers, along Z
        coor copy comp
        coor dupl select segid @poltype .and. resid @resid end -
                  select segid TEMP end
        coor orient rms comp select segid TEMP end
        echo ?thet ?xaxi ?yaxi ?zaxi

        ! round axis to Z or -Z
        set initang0 = @initang

        set zaxis = ?zaxi
        set initang = ?thet
        if zaxis .gt. 0 set zaxis =  1
        if zaxis .le. 0 set zaxis = -1

        ! perform initial rotation on molecule, unless component is fixed
        stream polinfo/position_@structi.str @xdim @ydim @zdim @cind
        set dorotate = no
        if xrand eq yes set dorotate = yes
        if yrand eq yes set dorotate = yes
        if dorotate eq yes -
        coor rotate zdir @zaxis phi @initang select target end

        delete atoms select segid TEMP end
        set initang = @initang0
    else
        ! random rotation for non-membrane, if it's membrane
        stream polinfo/position_@structi.str @xdim @ydim @zdim @cind
        set dorotate = no
        if xrand eq yes set dorotate = yes
        if yrand eq yes set dorotate = yes
        if zrand eq yes set dorotate = yes
        if dorotate eq yes -
        coor rotate xdir 1.0 ydir 1.0 zdir 1.0 phi @rotang sele target end
    endif

    ! move component to sphere's location
    coor trans xdir @xi ydir @yi zdir @zi sele target end

    ! skip manually-positioned components
    stream polinfo/position_@structi.str @xdim @ydim @zdim @cind
    if xrand eq no if yrand eq no if zrand eq no goto end_replace

    if @?debug .eq. 0 prnlev 0

    stream step2_transrot.str
    calc nbadtot = @nbadtot + @nbadmin

    prnlev 5

    write title unit 52
    * @typeind @sorti @nxyzmovemin @rotxangmin @rotyangmin @rotzangmin @nbadmin ?npair
    *

    label end_replace

    incr resid
    incr cind

    label skip_replace ! for cases where nlig == 0

    if nlig .ge. @cind goto @retlabel
    incr sorti

    if numtype .ge. @sorti then
        stream sorted_info.str @sorti @{sort_type}
        stream @{counts_file} @structi
        incr iend by @nlig
        set cind = 1
        goto @retlabel
    else
        set sorti = 1
        incr typeind
        ! Go to next structure type, if one exists
        if typeind .le. @nsorttypes then
            set sort_type = @{sort_type_@@typeind}
            stream sorted_info.str @sorti @{sort_type}
            stream @{counts_file} @structi
            set resid = 1
            set cind = 1
            set iend = @nlig
            goto @retlabel
        endif
     endif


write title unit 52
* cycle 0 @nbadtot
*

cons fix sele none end
delete atom select segid *POL* end

write psf  card name step2_molpacking.psf
write coor card name step2_molpacking.crd
write coor pdb name step2_molpacking.pdb

if nbadtot .eq. 0 goto DONE

!
! Optimize the molecular packing [STAGE 2]
!

! loop
set nopt = 6
set dosmall = 0

set iopt = 1
label do_optimize

write title unit 52
* cycle @iopt
*

! reset structure counts
set typeind = 1
set sort_type = @{sort_type_1}
set sorti = 1

stream sorted_info.str @sorti @{sort_type}
stream @{counts_file} @structi

set retlabel do_ioptimize
set cind = 1    ! current structure copy index

set nbadtot = 0
set nnomove = 0

label do_ioptimize
    if nlig .eq. 0 goto end_ioptimize
    if sort_type .eq. MEMB set poltype = MPOL
    if sort_type .eq. SOLVATED set poltype = SPOL
    ! get selection for this sphere
    stream psfcrdreader/select_@{structi}.str @cind

    ! skip manually-positioned components
    stream polinfo/position_@structi.str @xdim @ydim @zdim @cind
    if xrand eq no if yrand eq no if zrand eq no goto end_ioptimize

    !
    ! check bad contacts
    !

    calc nbadmax  =   0     ! maximum allowed # bad contacts
    calc dcut     =   2.5   ! distance cut for bad contact counts
    calc delang   =  10.0   ! rotation increment
    calc initang  = -10.0   ! inital rotation angle
    calc finalang =  10.0   ! final rotation angle
                            ! xy translation increment
    if poltype .eq. MPOL calc delxyz = @A / @nsphere / 2.0
    if poltype .ne. MPOL calc delxyz = @C / @nsphere / 2.0
    if delxyz .lt. 1.0 if dosmall eq 0 calc delxyz = 1.0
    if dosmall gt 0 calc delang = 1.0

    if dosmall .eq. 0 calc delxyz = @delxyz * (1.05 - 0.05 * @iopt)

    calc delang   = @delang    * (1.05 - 0.05 * @iopt)
    calc initang  = @initang   * (1.05 - 0.05 * @iopt)
    calc finalang = @finalang  * (1.05 - 0.05 * @iopt)

    if @?debug .eq. 0 prnlev 0

    stream step2_transrot.str
    calc nbadtot = @nbadtot + @nbadmin

    prnlev 5

    if nxyzmovemin .eq. 1 -
    if rotxangmin  .eq. 0 -
    if rotyangmin  .eq. 0 -
    if rotzangmin  .eq. 0 incr nnomove

    write title unit 52
    * @typeind @sorti @nxyzmovemin @rotxangmin @rotyangmin @rotzangmin @nbadmin ?npair
    *

    label end_ioptimize

    incr cind
    if nlig .ge. @cind goto @retlabel
    incr sorti
    if numtype .ge. @sorti then
        stream sorted_info.str @sorti @{sort_type}
        stream @{counts_file} @structi
        incr iend by @nlig
        set cind = 1
        goto @retlabel
    else
        set sorti = 1
        incr typeind
        ! Go to next structure type, if one exists
        if typeind .le. @nsorttypes then
            set sort_type = @{sort_type_@@typeind}
            stream sorted_info.str @sorti @{sort_type}
            stream @{counts_file} @structi
            set cind = 1
            set iend = @nlig
            goto @retlabel
        endif
    endif


calc pnomove = ( @nnomove + 1 ) / @nsphere

write title unit 52
* cycle @iopt @nbadtot @nnomove @pnomove
*

if nbadtot .eq. 0 goto DONE
if pnomove .gt. 0.9 then
    if dosmall eq 1 if pnomove ge 1.0 goto DONE
    set dosmall = 1
endif

open write card unit 10 name step2_molpacking_@iopt.pdb
write coor pdb  unit 10

increase iopt by 1
if iopt .le. @nopt goto do_optimize

label DONE


if nmemb .gt. 0 then
    ! Center everything along XY by mass
    coor stat mass
    coor trans xdir -?xave ydir -?yave
    coor stat
endif

!
! Re-place largest molecule to origin; ensure (potentially multi-segment)
! structures are within box boundaries
!

crystal free
crystal define @xtltype @A @B @C @alpha @beta @gamma

open read unit 10 card name crystal_image.str
crystal read unit 10 card
close unit 10

calc X = @A
calc Y = @B
calc Z = @C

calc xmin = -@X / 2
calc xmax =  @X / 2
calc ymin = -@Y / 2
calc ymax =  @Y / 2
calc zmin = -@Z / 2
calc zmax =  @Z / 2

calc cind = 1

set typeind = 1
set sort_type = @{sort_type_1}
set sorti = 1

stream sorted_info.str @sorti @{sort_type}
stream @{counts_file} @structi

set retlabel = do_boundary
set cind = 1                 ! current structure copy index
set nbadtot = 0

set boundim = 2.5            ! cutoff for collision counting

set checkmemb = 0
if dorestraint eq YES if sort_type eq SOLVATED set checkmemb = 1

label do_boundary
    ! skip solvent or non-solvent, as appropriate
    if nlig .le. 0 goto end_boundary

    ! skip manually-positioned components
    stream polinfo/position_@structi.str @xdim @ydim @zdim @cind
    if xrand eq no if yrand eq no if zrand eq no goto end_boundary

    ! move structure back within box
    stream psfcrdreader/select_@structi.str @cind
    coor stat mass select target end
    calc xpos = ?xave
    calc ypos = ?yave
    calc zpos = ?zave

    update imall inbf 0 cutim @boundim
    coor dist cut @boundim -
        sele target .and. .not. hydrogen end -
        sele .not. target .and. .not. hydrogen end images
    incr nbadtot by ?npair

    if checkmemb eq 1 then
        stream polinfo/select_pbc.str exclude
        define inpbc sele target .and. .not. hydrogen .and. inpbc end
        incr nbadtot by ?nsel
    endif

    if xpos .lt. @xmin coor trans xdir  @X select target end
    if xpos .gt. @xmax coor trans xdir -@X select target end

    if ypos .lt. @ymin coor trans ydir  @Y select target end
    if ypos .gt. @ymax coor trans ydir -@Y select target end

    if zpos .lt. @zmin coor trans zdir  @Z select target end
    if zpos .gt. @zmax coor trans zdir -@Z select target end

    label end_boundary

    incr cind
    if nlig .ge. @cind goto @retlabel
    incr sorti
    if numtype .ge. @sorti then
        stream sorted_info.str @sorti @{sort_type}
        stream @{counts_file} @structi
        incr iend by @nlig
        set cind = 1
        goto @retlabel
    else
        set sorti = 1
        incr typeind
        ! Go to next structure type, if one exists
        if typeind .le. @nsorttypes then
            set sort_type = @{sort_type_@@typeind}
            stream sorted_info.str @sorti @{sort_type}
            stream @{counts_file} @structi
            set cind = 1
            set iend = @nlig
            set checkmemb = 0
            if dorestraint eq YES if sort_type eq SOLVATED set checkmemb = 1
            goto @retlabel
        endif
    endif


echo @nbadtot
if nbadtot .gt. 0 stop ! ABNORMAL TERMINATION: failed to find packing configuration

crystal free
if @?impatch eq 0 set impatch NO
!
! Write PSF/CRD/PDB
!

open write unit 10 card name step2_molpacking.psf
write psf  unit 10 card

open write card unit 10 name step2_molpacking.crd
write coor card unit 10

open write card unit 10 name step2_molpacking.pdb
write coor pdb  unit 10
if @?impatch eq 0 set impatch = NO
if @?alpha eq 0 set alpha = 90.0
if @?beta eq 0 set beta = 90.0
if @?gamma eq 0 set gamma = 90.0

open write card unit 90 name step2_molpacking.str
write title unit 90
* set BOXTYPE = RECT
* set exclude_length = 0
* set pbcx = 0
* set pbcy = 0
* set pbcz = @pbcztot
* set impatch = @impatch
* set XTLTYPE = @xtltype
* set A = @A
* set B = @B
* set C = @C
* set ALPHA = @alpha
* set BETA = @beta
* set GAMMA = @gamma
* set XCEN = 0
* set YCEN = 0
* set ZCEN = 0
* set NCHARGE = ?cgtot
*

! Get membrane size information for membrane builder
if has_membrane .eq. YES then
    stream step2_area.str
endif

if impatch .eq. YES then
    system "python genimpsf_v2.py step2_molpacking.psf"
endif

!
! Final energy calculation
!

nbonds atom switch cdie vdw vfswitch  -
       ctonnb 10.0 ctofnb 12.0 cutnb 14.0 cutim 16.0 -
       inbfrq -1 imgfrq -1 wmin 1.0 cdie eps 80.0

coor stat
energy

stop

